// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FPKYC
import Combine
import CryptoKit
@_exported import FPKYC
import Foundation
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: FPKYC.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: FPKYC.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: FPKYC.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: FPKYC.KeychainSwiftAccessOptions, b: FPKYC.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum NetworkError : Swift.Error {
  case invalidURL
  case requestFailed
  case responseUnsuccessful
  case dataNotFound
  case decodingError
  case serverError(statusCode: Swift.Int)
  case unknownError
}
public enum SecurityError : Swift.Error {
  case keyGenerationFailed
  case encryptionFailed
  case decryptionFailed
  case signatureFailed
  case signatureVerificationFailed
  case hashingFailed
  case unknownError
  public static func == (a: FPKYC.SecurityError, b: FPKYC.SecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SecurityManager {
  public static let shared: FPKYC.SecurityManager
  public func encryptAES(data: Foundation.Data, key: CryptoKit.SymmetricKey) throws -> Foundation.Data
  public func decryptAES(data: Foundation.Data, key: CryptoKit.SymmetricKey) throws -> Foundation.Data
  public func generateRSAKeyPair() throws -> (privateKey: Security.SecKey, publicKey: Security.SecKey)
  public func encryptRSA(data: Foundation.Data, publicKey: Security.SecKey) throws -> Foundation.Data
  public func decryptRSA(data: Foundation.Data, privateKey: Security.SecKey) throws -> Foundation.Data
  public func signData(data: Foundation.Data, privateKey: Security.SecKey) throws -> Foundation.Data
  public func verifySignature(data: Foundation.Data, signature: Foundation.Data, publicKey: Security.SecKey) throws -> Swift.Bool
  public func hashSHA256(data: Foundation.Data) throws -> Foundation.Data
  @objc deinit
}
extension FPKYC.KeychainSwiftAccessOptions : Swift.Equatable {}
extension FPKYC.KeychainSwiftAccessOptions : Swift.Hashable {}
extension FPKYC.SecurityError : Swift.Equatable {}
extension FPKYC.SecurityError : Swift.Hashable {}
