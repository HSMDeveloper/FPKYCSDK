// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name FPKYC
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Combine
import CryptoKit
@_exported import FPKYC
import Foundation
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class KYCAdditionalUserInfoResponseViewModel {
  public var next_steps: [Swift.String] {
    get
  }
  public var customerNumber: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StepViewModel : Foundation.ObservableObject {
  public var id: Swift.Int {
    get
  }
  public var step: Swift.String {
    get
  }
  public var subTitle: Swift.String {
    get
  }
  public var title: Swift.String {
    get
  }
  public var hasNext: Swift.Bool
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class KYCViewModel : Foundation.ObservableObject {
  public static var shared: FPKYC.KYCViewModel
  final public func startKYC(birthdate: Swift.String, nationalCode: Swift.String, phoneNumber: Swift.String, completion: @escaping (Swift.Result<FPKYC.KYCStartResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func verifyOTP(otp: Swift.String, completion: @escaping (Swift.Result<FPKYC.KYCOTPVerifyResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func getTerms(completion: @escaping (Swift.Result<FPKYC.TermsViewModel, any Swift.Error>) -> Swift.Void)
  final public func checkTerms(termId: Swift.Int, completion: @escaping (Swift.Result<FPKYC.KYCGeneralSubmitResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func getSteps(completion: @escaping (Swift.Result<[FPKYC.StepViewModel], any Swift.Error>) -> Swift.Void)
  final public func validateNationalCard(nationalCardFrontImage: Swift.String, nationalCardRearImage: Swift.String, completion: @escaping (Swift.Result<FPKYC.NationalCardInfoViewModel, any Swift.Error>) -> Swift.Void)
  final public func recognize(selfieImage: Swift.String, selfieVideo: Swift.String, completion: @escaping (Swift.Result<FPKYC.KYCGeneralSubmitResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func validateBirthCertificate(mainPage: Swift.String, completion: @escaping (Swift.Result<FPKYC.KYCGeneralSubmitResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func submitAddress(province: Swift.String, city: Swift.String, mainStreet: Swift.String, alley: Swift.String, address: Swift.String, plaque: Swift.String, floor: Swift.String, postalCode: Swift.String, completion: @escaping (Swift.Result<FPKYC.KYCGeneralSubmitResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func getUserInfo(completion: @escaping (Swift.Result<FPKYC.KYCUserInfoViewModel, any Swift.Error>) -> Swift.Void)
  final public func submitSignature(signature: Swift.String, completion: @escaping (Swift.Result<FPKYC.KYCGeneralSubmitResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func submitAdditionalInfo(jobType: Swift.String, latinFatherName: Swift.String, latinFirstName: Swift.String, latinLastName: Swift.String, married: Swift.Bool, religion: Swift.String, completion: @escaping (Swift.Result<FPKYC.KYCAdditionalUserInfoResponseViewModel, any Swift.Error>) -> Swift.Void)
  final public func getStates(completion: @escaping (Swift.Result<[FPKYC.StateViewModel], any Swift.Error>) -> Swift.Void)
  final public func getCities(stateId: Swift.Int, completion: @escaping (Swift.Result<[FPKYC.CityViewModel], any Swift.Error>) -> Swift.Void)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: FPKYC.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: FPKYC.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: FPKYC.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KYCOTPVerifyResponseViewModel {
  public var next_steps: [Swift.String] {
    get
  }
  public var token: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CityViewModel {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var stateId: Swift.Int {
    get
  }
  @objc deinit
}
public enum SecurityError : Swift.Error {
  case keyGenerationFailed
  case encryptionFailed
  case decryptionFailed
  case signatureFailed
  case signatureVerificationFailed
  case hashingFailed
  case unknownError
  public static func == (a: FPKYC.SecurityError, b: FPKYC.SecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class StateViewModel {
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KYCUserInfoViewModel : Foundation.ObservableObject {
  public var address: Swift.String {
    get
  }
  public var birth_certificate_code: Swift.String {
    get
  }
  public var birthdate: Swift.String {
    get
  }
  public var city: Swift.String {
    get
  }
  public var customerNumber: Swift.String {
    get
  }
  public var documents: [FPKYC.DocumentViewModel] {
    get
  }
  public var father_name: Swift.String {
    get
  }
  public var first_name: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var identity_checked_at: Swift.String {
    get
  }
  public var join_date: Swift.String {
    get
  }
  public var last_name: Swift.String {
    get
  }
  public var national_code: Swift.String {
    get
  }
  public var phones: [FPKYC.PhoneViewModel] {
    get
  }
  public var postal_code: Swift.String {
    get
  }
  public var province: Swift.String {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocumentViewModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PhoneViewModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KYCGeneralSubmitResponseViewModel {
  public var next_steps: [Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TermsViewModel {
  public var creationDate: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
  public var id: Swift.Int {
    get
  }
  public var title: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NationalCardInfoViewModel : Swift.Codable {
  public var birthdate: Swift.String {
    get
  }
  public var fatherName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var isMale: Swift.Bool {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var nationalCode: Swift.String {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: FPKYC.KeychainSwiftAccessOptions, b: FPKYC.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetworkError : Swift.Error {
  case invalidURL
  case requestFailed
  case responseUnsuccessful
  case dataNotFound
  case decodingError
  case serverError(statusCode: Swift.Int)
  case unknownError
}
@_hasMissingDesignatedInitializers public class KYCStartResponseViewModel {
  public var clientId: Swift.String {
    get
  }
  public var nextSteps: [Swift.String] {
    get
  }
  @objc deinit
}
extension FPKYC.SecurityError : Swift.Equatable {}
extension FPKYC.SecurityError : Swift.Hashable {}
extension FPKYC.KeychainSwiftAccessOptions : Swift.Equatable {}
extension FPKYC.KeychainSwiftAccessOptions : Swift.Hashable {}
